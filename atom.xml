<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留白</title>
  <icon>https://www.gravatar.com/avatar/93bf00b8463a08dd9da1a4db37d17448</icon>
  <subtitle>留白</subtitle>
  <link href="https://startdreamman.github.io/LDK/atom.xml" rel="self"/>
  
  <link href="https://startdreamman.github.io/LDK/"/>
  <updated>2021-08-17T16:00:00.000Z</updated>
  <id>https://startdreamman.github.io/LDK/</id>
  
  <author>
    <name>留白</name>
    <email>3504448058@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象及类和对像的简介</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/</id>
    <published>2021-08-17T16:00:00.000Z</published>
    <updated>2021-08-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><p><strong>前言</strong>：要开始学习面向对象，之前听说，一直以为是模块化变成，类似于c语言里的结构体。今天来真实的了解一下。</p><p>​    最早并且一直流行到现在的编程语言C、C++、Java。其中C语言啊已经变为了面向过程编程的代表；而C++、Java是面向对象的编程语言。</p><p>所谓的面向过程指的是面对于一个问题的解决方案，更多的情况下是不会做出重用的设计思想的；而面向对象的主要事迹方式为模块化设计 ，并且可以进行重用配置。在整个的面向对象的设计里面更多情况下考虑的是标准，在使用的时候根据标准进行拼装。</p><h5 id="对于面向对象设计有三个主要特征："><a href="#对于面向对象设计有三个主要特征：" class="headerlink" title="对于面向对象设计有三个主要特征："></a>对于面向对象设计有三个主要特征：</h5><pre><code>- 封装性：内部的操作对外部而言不可见，当内部的操作都不可直接使用的时候才是安全的；- 继承性：在已有结构的基础上继续进行功能的扩充；- 多态性：是在继承性的基础上扩充而来的概念，指的是类型的转换处理；</code></pre><h5 id="在进行面向对象程序开发之中一般还有三个步骤："><a href="#在进行面向对象程序开发之中一般还有三个步骤：" class="headerlink" title="在进行面向对象程序开发之中一般还有三个步骤："></a>在进行面向对象程序开发之中一般还有三个步骤：</h5><pre><code>- OOA：面向对象分析；- OOD：面向对象设计；- OOP：面向对象编程；</code></pre><h4 id="类与对象的简介"><a href="#类与对象的简介" class="headerlink" title="类与对象的简介"></a>类与对象的简介</h4><p>面向对象是一个非常庞大的话题，其核心组成为：类和对象。</p><p>类是对某一事物的共性的抽象概念，而对象描述的是一个具体的产物。</p><p>类和对象的关系，可以用一个列子进行解释：我们都是人，但我们之间是不同的。我们都属于人这个群体，人就相当于一个类，但是我们之间是有不同属性的，例如：性别、年龄、姓名这些属性都是不尽相同的，所以每一个人就相当于一个对象。</p><p>自己的几个理解：</p><ul><li>类是一个模板，而对象才是类可以使用的实列，先有类再有对象。</li><li>类是一个标准，不能直接用，对象是可以直接用的。</li><li>对象是类的实列。</li></ul><p>在类中一般都会有两个组成：</p><ul><li>成员属性（Field）：简称为属性；<ul><li>一个人的年龄、姓名都是不同的，所以这些对于整体来讲就称为属性。</li></ul></li><li>操作方法（Method）：定义对象具有的处理行为；<ul><li>这个人可以唱歌、游泳等；</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
    <category term="java基础" scheme="https://startdreamman.github.io/LDK/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java程序逻辑控制语句</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/16/Java%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/16/Java%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-08-15T16:00:00.000Z</published>
    <updated>2021-08-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><p>​    在程序开发的过程中一共会存在三种程序逻辑：顺序结构、分支结构和循环结构，之前所写的代码基本都是顺序结构。</p><h4 id="IF分支结构"><a href="#IF分支结构" class="headerlink" title="IF分支结构"></a>IF分支结构</h4><p>​        if分支结构主要针对关系表达式进行判断处理的分支操作。主要有三类使用形式，关键字主要是<code>if</code>和<code>else</code>。</p><ul><li>if</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    条件满足时;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>if…else…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    条件满足时;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    条件不满足时;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多判断条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    条件满足时;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    条件满足时;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    条件满足时;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">else</span>&#123;</span><br><span class="line">    条件不满足时;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h4 id="SWITCH开关语句（属于分支语句）"><a href="#SWITCH开关语句（属于分支语句）" class="headerlink" title="SWITCH开关语句（属于分支语句）"></a>SWITCH开关语句（属于分支语句）</h4><p>​    switch主要是根据内容来进行的判断，需要注意的是，它能够判断的只能是数据，并且数据类型只能是：int、char、枚举和String，而不能够使用逻辑判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(数据)&#123;</span><br><span class="line">        <span class="keyword">case</span> 数值：&#123;<span class="comment">//&#123;&#125;可以写也可以不写</span></span><br><span class="line">            数值满足时;</span><br><span class="line">            [<span class="keyword">break</span>;]<span class="comment">//可选项</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> 数值：&#123;</span><br><span class="line">            数值满足时;</span><br><span class="line">            [<span class="keyword">break</span>;]</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="keyword">default</span>:&#123;<span class="comment">//default也是可选项</span></span><br><span class="line">            所有判断数值不满足时;</span><br><span class="line">            [<span class="keyword">break</span>;]</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意：break；这句不加的话，当数据满足第一个case语句的数值的时候，之后 的语句将不进行判断，直接执行。</p><p>从JDK1.7的时代开始，Oracle公司推出的JDK1.7版本里面将开发着呼吁10年以上的功能加到了系统之中，可以进行字符串数据的判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        String str=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(str)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Hello&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;NO match&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果为 hello</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="WHILE循环语句"><a href="#WHILE循环语句" class="headerlink" title="WHILE循环语句"></a>WHILE循环语句</h4><p>​    所谓的循环结构就是某一段代码被重复执行。</p><ul><li>while()循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">    修改循环条件;    <span class="comment">//不修改的话就会变成死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>do…while()循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    条件满足时执行;</span><br><span class="line">    修改循环条件;    <span class="comment">//不修改的话就会变成死循环</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><ul><li><p>while与do…while的区别</p><ul><li><p>前者是先进行判断在执行，后者是先执行一次再进行判断。</p></li><li><p>后者使用机率非常小，几乎只有1%。</p></li></ul></li></ul><h4 id="FOR循环语句"><a href="#FOR循环语句" class="headerlink" title="FOR循环语句"></a>FOR循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(定义循环的初始化数值;循环判断;修改循环数据)&#123;</span><br><span class="line">    循环语句的执行;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：实现从1到100的累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">100</span>;x++)&#123;</span><br><span class="line">    sum+=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>与C语言一样，for里面的三项参数甚至都可以省略，但```;``是不能少的。（这是不建议的）</li><li>while和for循环的一般选择参考<ul><li>在明确确定循环次数的情况下优先选择for循环；</li><li>在不知道循环次数但是知道循环结束条件的情况下使用while循环；</li></ul></li></ul><h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><p>​    在循环语句定义的时候还有两个控制语句：break、continue；（与c语言的功能一样）。</p><ul><li>break的功能是退出整个循环结构；</li><li>continue的功能是退出本次（当前）循环，不执行continue之后的语句直接开始下一次循环；</li><li>continue有个功能可以实现C语言里的goto的部分功能，但不建议使用，容易造成代码的混乱。（小编现知道这样用）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        point: <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">continue</span> point;</span><br><span class="line">            System.out.print(x+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果:0 1 2 4 5 6 7 8 9 </span></span><br><span class="line"><span class="comment">//少了3</span></span><br></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><p>​    简单来说就是循环套循环，但嵌套的越多，时间复杂度也就越高。</p><p>下面用打印乘法表来进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">9</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=x;y++)&#123;</span><br><span class="line">                System.out.print(y+<span class="string">&quot;x&quot;</span>+x+<span class="string">&quot;=&quot;</span>+x*y+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1x1=<span class="number">1</span> </span><br><span class="line">1x2=<span class="number">2</span> 2x2=<span class="number">4</span> </span><br><span class="line">1x3=<span class="number">3</span> 2x3=<span class="number">6</span> 3x3=<span class="number">9</span> </span><br><span class="line">1x4=<span class="number">4</span> 2x4=<span class="number">8</span> 3x4=<span class="number">12</span> 4x4=<span class="number">16</span> </span><br><span class="line">1x5=<span class="number">5</span> 2x5=<span class="number">10</span> 3x5=<span class="number">15</span> 4x5=<span class="number">20</span> 5x5=<span class="number">25</span> </span><br><span class="line">1x6=<span class="number">6</span> 2x6=<span class="number">12</span> 3x6=<span class="number">18</span> 4x6=<span class="number">24</span> 5x6=<span class="number">30</span> 6x6=<span class="number">36</span> </span><br><span class="line">1x7=<span class="number">7</span> 2x7=<span class="number">14</span> 3x7=<span class="number">21</span> 4x7=<span class="number">28</span> 5x7=<span class="number">35</span> 6x7=<span class="number">42</span> 7x7=<span class="number">49</span> </span><br><span class="line">1x8=<span class="number">8</span> 2x8=<span class="number">16</span> 3x8=<span class="number">24</span> 4x8=<span class="number">32</span> 5x8=<span class="number">40</span> 6x8=<span class="number">48</span> 7x8=<span class="number">56</span> 8x8=<span class="number">64</span> </span><br><span class="line">1x9=<span class="number">9</span> 2x9=<span class="number">18</span> 3x9=<span class="number">27</span> 4x9=<span class="number">36</span> 5x9=<span class="number">45</span> 6x9=<span class="number">54</span> 7x9=<span class="number">63</span> 8x9=<span class="number">72</span> 9x9=<span class="number">81</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
    <category term="java基础" scheme="https://startdreamman.github.io/LDK/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>方法的定义与使用</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/16/%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/16/%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-15T16:00:00.000Z</published>
    <updated>2021-08-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><h3 id="方法的定义及使用"><a href="#方法的定义及使用" class="headerlink" title="方法的定义及使用"></a>方法的定义及使用</h3><p>​    方法（method）即为函数（function），两者的概念一样。</p><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>基本定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名称([参数类型 变量,...])&#123;</span><br><span class="line">    <span class="comment">//该方法要执行的代码</span></span><br><span class="line">    [<span class="keyword">return</span>[返回值];]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>return返回的数据类型与方法声明的返回值类型相同；</li><li>返回值可以使用Java中定义的数据类型（基本数据类型、引用数据类型）；</li><li>无返回值的话方法使用的反回值类型为void；</li></ul><p>关于方法名称与变量的定义命名要求（不是硬性规定，只是一定的约定性建议：驼峰命名法）：</p><ul><li>在进行方法名称定义的时候要求第一个单词的字母小写，而后每个单词的首字母大写；</li><li>在进行变量名称的定义的时候要求与方法名称一样；</li></ul><p>一个无参无返回值的方法范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        printName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;留白!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        方法的本质是方便使用者进行重复的调用，并且所有的程序一定都是通过主方法开始执行的。</p><p>下面是一个有返回值有参数的方法范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> money=<span class="number">30</span>;</span><br><span class="line">        String result=get(money);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(get(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(<span class="keyword">double</span> money)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(money&gt;=<span class="number">19.8</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;给你一份快餐，找你&quot;</span>+(money-<span class="number">19.8</span>)+<span class="string">&quot;元&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;余额不足！！！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果方法的返回值类型为void，那么可以利用return来结束方法的调用。</li></ul><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>​    当方法名称相同，参数的类型或个数不同的时候就称为方法重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> resultA=sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> resultB=sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">double</span> resultC=sum(<span class="number">10.1</span>,<span class="number">20.4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法计算结果为:&quot;</span>+resultA);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法计算结果为:&quot;</span>+resultB);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法计算结果为:&quot;</span>+resultC);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> x + y + z;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">加法计算结果为:<span class="number">30</span></span><br><span class="line">加法计算结果为:<span class="number">60</span></span><br><span class="line">加法计算结果为:<span class="number">30.5</span></span><br></pre></td></tr></table></figure><p>​    从上面的列子可以看出同一个方法名称可以根据调用时传递的不同参数类型或个数实现不同方法体的调用，这样就实现了方法的重载。</p><p>​    千万要注意的一点时方法的重载与方法的返回值类型没有任何关系，它只跟参数有关系，但是在实际的开发过程中，一个基本原则是：只要是方法重载，强烈建议其返回值的类型相同。</p><h4 id="方法的递归调用"><a href="#方法的递归调用" class="headerlink" title="方法的递归调用"></a>方法的递归调用</h4><p>​    方法的递归调用指的是一个方法自己调用自己的情况，利用递归调用可以解决一些重复且麻烦的问题。在进行递归调用方法的时候，有下面的几点问题需要考虑：</p><ul><li>一定要设置方法调用的结束条件；</li><li>每次调用的过程之中一定要修改传递的参数条件；</li></ul><p>下面使用从1到100的累加和演示递归的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> num+sum(num-<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程分析：</p><p>第一次执行sum（100）：return 100+sum(99);</p><p>第二次执行sum  (99)：return 99+sum（98）；</p><p>…</p><p>第99次执行sum（2）：return 2+sum（1）；</p><p>第100次执行sum（1）：num==1,return 1;</p><p>整体：return 100+99+…+2+1；</p><p>递归调用还需要注意的另一个问题是内存溢出问题，很多很多次的递归的话就会发生内存溢出的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
    <category term="java基础" scheme="https://startdreamman.github.io/LDK/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java的运算符</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/08/Java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/08/Java%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-08-07T16:00:00.000Z</published>
    <updated>2021-08-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><h4 id="运算符简介"><a href="#运算符简介" class="headerlink" title="运算符简介"></a>运算符简介</h4><p>​    程序开发实际上就是一种数据操作游戏，所以每种语言都提供了大量的基础运算用于各种操作，比如加减乘<code>+、-、*、/</code>，需要注意的是，各种运算夫之间的优先级。</p><hr><ul><li><p>数学运算符</p><ul><li>主要说明的是自增和自减操作（与C语言一样）<ul><li>当++和–做前缀的时候，先计算++和–；</li><li>当做后缀的时候，先使用变量再进行自增自减；</li></ul></li><li><code>++、--、/=、+=、*=、%=</code>等这些操作都是当时减少内存开销的手段；</li></ul></li><li><p>关系运算符</p><ul><li><p>与c语言不通的是，关系运算会返回Boolean类型的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> y=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag=x==y;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果位true</span></span><br></pre></td></tr></table></figure></li><li><p>另一个让我感到惊艳的是，在Java中字符串也可以直接进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        String str1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String str2=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag=str1==str2;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果为 true</span></span><br></pre></td></tr></table></figure><p>还有就是，由于采用uicode编码，汉字字符也可以进行比较。</p></li></ul></li><li><p>逻辑运算符</p><ul><li><p>讲解一个三目运算符</p><ul><li><p><code>？：</code>：关系运算？关系满足：关系不满足；</p></li><li><p>三目运算的优点是可以减少运算量</p></li><li><p>经典列子：（两个数求其中的最大值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">10</span>,y=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> max=x&gt;y?x:y;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三目运算符也可以进行嵌套的，但是可读性降低，一般不建议使用。比如下面的例子（求三个数中的最大值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">10</span>,y=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> z=<span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> max=(x&gt;y)?(x&gt;z?x:z):(y&gt;z?y:z);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>位运算</p><p>位运算指的是可以直接进行二进制数据的计算处理。</p><ul><li>与运算（&amp;）<ul><li>对应位都为1的时候才为1，否则为0</li></ul></li><li>或运算（|）<ul><li>对应位中只要有一位是1，则结果为1，两位都为0的时候结果才为0</li></ul></li><li>异或运算（^）<ul><li>对应位值相同为1，否则为0</li></ul></li><li>反码（~）<ul><li>是一元运算符，将0变1，1变0</li></ul></li><li>位移操作<ul><li>&lt;&lt;（左移）用来将一个数的各二进制位全部左移N位，右补零</li><li><code>&gt;&gt;</code>（右移）将一个数的各二进制位右移N位，移动到右端的位被舍弃，对于无符号数高位补零</li></ul></li></ul></li></ul><hr><p>关于位操作的一些使用技巧和“歪门邪道”，之后会更新整理。。。（2021-08-09）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
    <category term="java基础" scheme="https://startdreamman.github.io/LDK/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>对Java数据类型的简单认识</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/07/Java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/07/Java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-06T16:00:00.000Z</published>
    <updated>2021-08-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><h4 id="Java数据类型简介"><a href="#Java数据类型简介" class="headerlink" title="Java数据类型简介"></a>Java数据类型简介</h4><ul><li><p>程序的最终目的是对数据进行处理，所以就一定需要各种数据类型的定义</p></li><li><p>Java数据分类</p><p>在Java语言中，对数据类型一共分为两类：</p><ul><li>基本数据类型：描述的是一些具体的数字单元。<ul><li>数值型：<ul><li>整形：<code> byte</code>、<code>short</code>、<code>int</code>、<code>long</code>；            →默认值：0；</li><li>浮点型：<code>float</code>、<code>double</code>；                             →默认值：0.0；</li></ul></li><li>布尔型：<code>boolean</code>；                                                  →默认值：false；</li><li>字符型：<code>char</code>；                                                        →默认值：’\u0000’;</li></ul></li><li>引用数据类型：牵扯到内存关系的使用（较复杂）<ul><li>数组、类、接口。                                                      →默认值：null;</li></ul></li></ul></li><li><p>一些数据类型上的选择（仅供参考）</p><ul><li>如果要是描述数字首选的一定是int（整数）、double（小数）；</li><li>如果是要进行数据传输或者是进行文字编码转换使用byte类型（二进制处理操作）；</li><li>处理中文的时候最方便的操作使用的是字符char来完成（可选概念）；</li><li>描述内存或文件大小、描述表的主键列（自动增长类）可以使用long；</li></ul></li></ul><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li><p>整型数据类型（按照保存的范围由小到大：byte、short、int、long）</p><p>整数类数字默认的都为int型；</p><ul><li>byte<ul><li>大小：8位</li><li>范围：-128~127</li></ul></li><li>short<ul><li>大小：16位</li><li>范围：-32768~32767</li></ul></li><li>int<ul><li>大小：32位</li><li>范围：-2147483648~2147483647</li></ul></li><li>long<ul><li>大小：64位</li><li>范围：-9223372036854775808 ~ 9223372036854775807（-2E64~2E64-1）</li></ul></li><li>关于数据溢出<ul><li>数据溢出是指变量所存储的数据超过了该变量数据类型的存储范围</li><li>当发生数据溢出的时候就要进行数据类型的转换<ul><li>强制数据类型的转换<code>（要转换的数据类型）变量名</code>;</li><li>不建议范围大的数据类型向范围小的数据类型转换，会损失精度;</li><li>在不同类型数据类型进行计算的时候程序一般会趋于向更大范围的数据类型转换;</li></ul></li></ul></li></ul></li><li><p>浮点型数据类型</p><p>小数类数字默认的都是double类型；要想使用float类型的数据，只要在赋值的时候在后面加上F即可。但是要注意数据精度的要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> x=<span class="number">10.1F</span>;</span><br><span class="line">        <span class="keyword">double</span> y=<span class="number">10.1</span>;</span><br><span class="line">        System.out.println(x*x);</span><br><span class="line">        System.out.println(y*y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">102.01001</span></span><br><span class="line"><span class="number">102.00999999999999</span></span><br></pre></td></tr></table></figure><ul><li>float（单精度）<ul><li>大小：32位</li><li>范围：-3.4E38~3.4E38</li></ul></li><li>double（双精度）<ul><li>大小：64</li><li>范围：-1.7E308~1.7E308</li></ul></li></ul></li><li><p>字符型数据</p><p>char适合保存中文数据，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c=<span class="string">&#x27;仁&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> num=c;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//20161</span></span><br></pre></td></tr></table></figure><p>之所以可以这样，是因为java使用的是unicode这种十六进制的编码，这种编码的特点是可以包括任意的文字内容。</p><ul><li>char<ul><li>大小：16位</li><li>范围：0~65536</li></ul></li></ul></li><li><p>布尔数据类型</p><p>布尔是一位数学家的名字，布尔主要描述的是一种逻辑的处理结果。</p><ul><li>boolean<ul><li>只有两个值：true、false；</li><li>值得注意的是，在不存在boolean类型的编程语言中（比如c语言），会使用0表示false，非零数表示true，但在java中是不存在这种情况的。</li></ul></li></ul></li><li><p>String字符串</p><ul><li>在任何语言里都没有提供所谓的字符串这种基本数据类型，但是从实际的应用上来看也都会提供有字符串的相应描述，在Java里面使用的是String作为字符串的定义。</li><li>由于String类的存在较为特殊，所以其可以向普通变量那样采用直接复制的方式进行赋值，但值的内容是需要在<code>&quot;&quot;</code>（英文）里的。</li><li>注意：<ul><li>在Java中<code>+</code>可以用于字符串的连接，当数据计算时有String类型的时候，数据会无条件的转向String类型，所以要加<code>（）</code>提高其他运算符的等级；</li><li>转义字符的使用，与C语言一样。</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
    <category term="Java基础" scheme="https://startdreamman.github.io/LDK/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>PASH和CLASSPATH的设置和初步理解</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/06/PASH%E5%92%8CCLASSPATH%E5%B1%9E%E6%80%A7%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/06/PASH%E5%92%8CCLASSPATH%E5%B1%9E%E6%80%A7%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2021-08-05T16:00:00.000Z</published>
    <updated>2021-08-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><ul><li><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><ul><li>为什么要配置Path环境变量？<ul><li>什么是Path环境变量？<br><strong>PATH是操作系统提供的路径配置，定义所有可执行程序的路径。</strong></li><li>在JDK里所有的可执行程序的路径为<code>D:\JDK\bin</code>(自己安装JDK的路径)，主要使用bin下的java.exe和javac.exe两个命令，即<code>java</code>和<code>javac</code>。但是这两个命令并不属于Windows本身，为了能够在命令行中使用这两个命令，所以才需要去配置Path这个环境变量。（注意是Path是系统环境变量下配置的）</li></ul></li><li>配置方法或者格式<ul><li>环境变量的寻找路径：<code>【此电脑】→【属性】→【高级系统设置】→【环境变量】→【系统变量】→【Path】→【编辑】</code></li><li>在Path变量下添加一个<code>D:\JAVA\SOFT\JDK\jdk16\bin</code>（自己JDK的安装路径）</li></ul></li></ul></li><li><h4 id="CLASSPATH"><a href="#CLASSPATH" class="headerlink" title="CLASSPATH"></a>CLASSPATH</h4><ul><li><p>为什么要配置CLASSPATH环境变量？</p><ul><li><p>什么是CLASSPATH变量？</p><p>​    <strong>CLASSPATH是JRE提供的，用于定义Java程序解释时类加载路径，默认设置的为当前所在目录加载。</strong></p></li><li><p>JVM会先找到CLASSPATH定义的路径然后再加载字节码文件。</p><ul><li>存在关系：<strong>JVM→CLASSPATH定义的路径→加载字节码文件。</strong></li></ul></li><li><p>虽然会默认为当前路径加载，即<code>.</code>,但是当安装其他Java软件是，有可能被更改，形成加载混乱，所以有必要重新设置一下。</p></li></ul></li><li><p>配置方法</p><ul><li>如同Path一样在系统变量里设置，但CLASSPATH变量需要自己去添加。<ul><li>其值为：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code> (其中<code>.</code>是必须要有的)</li><li>%JAVA_HOME%的解释<ul><li>JAVA_HOME是一个常用的变量，其中<code>JAVA_HOME的值</code>为JDK的安装路径<code>D:\JAVA\SOFT\JDK\jdk16</code>,这样的话Path需要添加的即为<code>%JAVA_HOME%\bin</code></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>快速幂</title>
    <link href="https://startdreamman.github.io/LDK/2021/08/02/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://startdreamman.github.io/LDK/2021/08/02/%E5%BF%AB%E9%80%9F%E5%B9%82/</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2021-08-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><h4 id="快速幂-Fast-Power"><a href="#快速幂-Fast-Power" class="headerlink" title="快速幂(Fast_Power)"></a>快速幂(Fast_Power)</h4><p>​        当要计算a^b的结果时，一般想到的方法就是循环b次a*a</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Normal_Power</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> base,<span class="keyword">long</span> <span class="keyword">long</span> power)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;power;i++)&#123;</span><br><span class="line">        result*=base;l</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        虽然现在电脑的运算速度都已经非常快了，但是当遇到2^1000000000这种情况，怎么也要几秒吧？这种耗时的计算肯定不可取的。（想必总不能看着OJ里的超时提醒，你不……）</p><p>​        快速幂其实很简单，运算方法你一定见过，还记得高中数学的一个式子吧<code>2^4=(2^2)^2=4^2</code>，于是有了下面的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Fast_power</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> base,<span class="keyword">long</span> <span class="keyword">long</span> power)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(power&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(power%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            base*=base;</span><br><span class="line">            power/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            power--;</span><br><span class="line">            result*=base;</span><br><span class="line">            power/=<span class="number">2</span>;</span><br><span class="line">            base*=base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速幂优化"><a href="#快速幂优化" class="headerlink" title="快速幂优化"></a>快速幂优化</h4><ul><li>第一次优化（由于上面的代码，if和else部分还是有重复部分的）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">power/=<span class="number">2</span>;</span><br><span class="line">base*=base;</span><br></pre></td></tr></table></figure><p>​        将其精简后变成下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Fast_power</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> base,<span class="keyword">long</span> <span class="keyword">long</span> power)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(power&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(power%<span class="number">2</span>==<span class="number">1</span>) result*=base;</span><br><span class="line">        power/=<span class="number">2</span>;</span><br><span class="line">        base*=base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过c语言的位运算压榨最后的性能</p><p>（如果power为偶数，则表示其的二进制的最后一位一定是0；否则为1。power的二进制向右移动一位则值为其原来的一半）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Fast_power</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> base,<span class="keyword">long</span> <span class="keyword">long</span> power)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(power&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(power&amp;<span class="number">1</span>) result*=base;</span><br><span class="line">        power&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        base*=base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_19782019/article/details/85621386?ops_request_misc=%7B%22request_id%22:%22162786442116780357269498%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162786442116780357269498&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-85621386.first_rank_v2_pc_rank_v29&utm_term=%E5%BF%AB%E9%80%9F%E5%B9%82&spm=1018.2226.3001.4187">参考文章</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
    <category term="算法" scheme="https://startdreamman.github.io/LDK/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>利用IP映射加速GitHub的访问</title>
    <link href="https://startdreamman.github.io/LDK/2021/07/29/2021-7-29-%E5%88%A9%E7%94%A8IP%E6%98%A0%E5%B0%84%E5%8A%A0%E9%80%9FGitHub%E7%9A%84%E8%AE%BF%E9%97%AE/"/>
    <id>https://startdreamman.github.io/LDK/2021/07/29/2021-7-29-%E5%88%A9%E7%94%A8IP%E6%98%A0%E5%B0%84%E5%8A%A0%E9%80%9FGitHub%E7%9A%84%E8%AE%BF%E9%97%AE/</id>
    <published>2021-07-28T16:00:00.000Z</published>
    <updated>2021-07-29T11:23:34.110Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于刚重装完系统，之前的配置都已经没了。忘了如何配置的我又不得不去找教程，这次一我自己把这个过程记录下来，以便之后使用</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h5 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h5><p>通过查询域名的IP，配置hosts实现加速github的效果。（由于映射的IP有时会变化，所以变的时候要去重新查询和配置）</p><h5 id="下面是两个查询IP的网站（建议先使用第一个）"><a href="#下面是两个查询IP的网站（建议先使用第一个）" class="headerlink" title="下面是两个查询IP的网站（建议先使用第一个）"></a>下面是两个查询IP的网站（建议先使用第一个）</h5><ul><li><a href="https://markdown.com.cn/basic-syntax/links.html">IPAddress.com</a></li><li><a href="http://tool.chinaz.com/dns/">站长工具</a></li></ul><h5 id="需要查询的网址"><a href="#需要查询的网址" class="headerlink" title="需要查询的网址"></a>需要查询的网址</h5><ul><li>github.com</li><li>assets-cdn.github.com</li><li>github.global.ssl.fastly.net</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>查询以上网址的IP地址，并记录下来（出现一个域名多个IP的，把所有IP都记录下来）</p></li><li><p>找到hosts文件的地址（C:\Windows\System32\drivers\etc）</p></li><li><p>将记录的东西添加到hosts文件中<img src="https://startdreamman.github.io/LDK/img/hosts_github.png" alt="hosts示例图"></p></li><li><p>刷新本机的DNS解析缓存</p><ol><li>win+R，打开cmd</li><li>输入命令ipconfig/flushdns</li></ol></li><li><p>测试</p></li></ol><p><a href="https://blog.csdn.net/weixin_45604606/article/details/116399620">文章参考源地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello,my blog world</title>
    <link href="https://startdreamman.github.io/LDK/2021/07/25/Hello_World/"/>
    <id>https://startdreamman.github.io/LDK/2021/07/25/Hello_World/</id>
    <published>2021-07-25T14:37:00.000Z</published>
    <updated>2021-07-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\LDK\css\APlayer.min.css"><script src="\LDK\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\LDK\js\Meting.min.js"></script><hr><h3 id="纪念我的第一篇博客"><a href="#纪念我的第一篇博客" class="headerlink" title="纪念我的第一篇博客"></a>纪念我的第一篇博客</h3><ul><li>每学一种语言的开始都是先学会写<strong>Hello World!</strong>,  还记得当我第一次用<strong>C</strong>语言敲下这串代码时的激动与喜悦，在之后用<strong>JAVA</strong>和<strong>Python</strong>敲出时也仍是抱着一样的心情。</li><li>每一种语言都是一个新颖的世界，这个属于我的博客网站也一样，所以我的第一篇博客的名字诞生： <strong>Hello,my blog world!</strong></li><li>关于<strong>赞美愚者</strong>，来自<strong>《诡秘之主》</strong>这本小说，它给我的感觉就像一个全新奇幻而又真实的世界。<strong>切记</strong>：不要直视神，就算是愚者，也不要直视祂！！！哦，赞美愚者！！！</li></ul><h3 id="网站历程"><a href="#网站历程" class="headerlink" title="网站历程"></a>网站历程</h3><ul><li><p>怎么说呢？改用一句名言：<strong>BugBug ErrorError FailedFailed,怎一个苦字了得</strong></p></li><li><p>回家后玩了一天，一直到现在。只要是醒着，不是在吃饭，就一定在电脑前坐着，弄得现在脖子和背都很酸痛。各种不知名的报错加上电脑的问题（忍它蓝屏好久了），不过解决后也很开心。</p></li><li><p>主要在搞<strong>音乐播放</strong>功能，<strong>聊天室</strong>的建立，还有<strong>评论功能</strong>的加入</p></li><li><p>一些页面还没有开始建立，以后会<strong>佛系更新</strong>的，。</p></li><li><p>特别鸣谢：我的好<strong>巨人</strong>，他网站的链接在这里**<a href="https://dengxiayouhun.github.io/">青春玩命的年代</a>**,<strong>已经有好多篇博文了哦，快去盘他！！！</strong></p><h3 id="音乐链接"><a href="#音乐链接" class="headerlink" title="音乐链接"></a><strong><a href="https://startdreamman.github.io/LDK/music/">音乐链接</a></strong></h3></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\LDK\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\LDK\js\APlayer.min.js&quot; class=&quot;ap</summary>
      
    
    
    
    
  </entry>
  
</feed>
